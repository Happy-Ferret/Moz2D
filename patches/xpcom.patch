diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/base/nsMemoryReporterManager.cpp xpcom-patched/base/nsMemoryReporterManager.cpp
--- xpcom/base/nsMemoryReporterManager.cpp	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/base/nsMemoryReporterManager.cpp	2016-10-14 18:23:37.000000000 +0200
@@ -1726,35 +1726,6 @@
                                    s->mAnonymize, parentDMDFile,
                                    s->mFinishReporting, s->mFinishReportingData);
 
-  nsTArray<ContentParent*> childWeakRefs;
-  ContentParent::GetAll(childWeakRefs);
-  if (!childWeakRefs.IsEmpty()) {
-    // Request memory reports from child processes.  This happens
-    // after the parent report so that the parent's main thread will
-    // be free to process the child reports, instead of causing them
-    // to be buffered and consume (possibly scarce) memory.
-
-    for (size_t i = 0; i < childWeakRefs.Length(); ++i) {
-      s->mChildrenPending.AppendElement(childWeakRefs[i]);
-    }
-
-    nsCOMPtr<nsITimer> timer = do_CreateInstance(NS_TIMER_CONTRACTID);
-    // Don't use NS_ENSURE_* here; can't return until the report is finished.
-    if (NS_WARN_IF(!timer)) {
-      FinishReporting();
-      return NS_ERROR_FAILURE;
-    }
-    rv = timer->InitWithFuncCallback(TimeoutCallback,
-                                     this, kTimeoutLengthMS,
-                                     nsITimer::TYPE_ONE_SHOT);
-    if (NS_WARN_IF(NS_FAILED(rv))) {
-      FinishReporting();
-      return rv;
-    }
-
-    MOZ_ASSERT(!s->mTimer);
-    s->mTimer.swap(timer);
-  }
 
   return NS_OK;
 }
@@ -1926,37 +1897,7 @@
 nsMemoryReporterManager::StartChildReport(mozilla::dom::ContentParent* aChild,
                                           const PendingProcessesState* aState)
 {
-#ifdef MOZ_NUWA_PROCESS
-  if (aChild->IsNuwaProcess()) {
-    return false;
-  }
-#endif
-
-  if (!aChild->IsAlive()) {
-    MEMORY_REPORTING_LOG("StartChildReports (gen=%u): child exited before"
-                         " its report was started\n",
-                         aState->mGeneration);
-    return false;
-  }
-
-  mozilla::dom::MaybeFileDesc dmdFileDesc = void_t();
-#ifdef MOZ_DMD
-  if (!aState->mDMDDumpIdent.IsEmpty()) {
-    FILE *dmdFile = nullptr;
-    nsresult rv = nsMemoryInfoDumper::OpenDMDFile(aState->mDMDDumpIdent,
-                                                  aChild->Pid(), &dmdFile);
-    if (NS_WARN_IF(NS_FAILED(rv))) {
-      // Proceed with the memory report as if DMD were disabled.
-      dmdFile = nullptr;
-    }
-    if (dmdFile) {
-      dmdFileDesc = mozilla::ipc::FILEToFileDescriptor(dmdFile);
-      fclose(dmdFile);
-    }
-  }
-#endif
-  return aChild->SendPMemoryReportRequestConstructor(
-    aState->mGeneration, aState->mAnonymize, aState->mMinimize, dmdFileDesc);
+	return false;
 }
 
 void
@@ -1977,23 +1918,6 @@
                        s->mNumProcessesRunning,
                        static_cast<unsigned>(s->mChildrenPending.Length()));
 
-  // Start pending children up to the concurrency limit.
-  while (s->mNumProcessesRunning < s->mConcurrencyLimit &&
-         !s->mChildrenPending.IsEmpty()) {
-    // Pop last element from s->mChildrenPending
-    RefPtr<ContentParent> nextChild;
-    nextChild.swap(s->mChildrenPending.LastElement());
-    s->mChildrenPending.TruncateLength(s->mChildrenPending.Length() - 1);
-    // Start report (if the child is still alive and not Nuwa).
-    if (StartChildReport(nextChild, s)) {
-      ++s->mNumProcessesRunning;
-      MEMORY_REPORTING_LOG("HandleChildReports (aGen=%u): started child report"
-                           " (%u running, %u pending)\n",
-                           aGeneration, s->mNumProcessesRunning,
-                           static_cast<unsigned>(s->mChildrenPending.Length()));
-    }
-  }
-
   // If all the child processes (if any) have reported, we can cancel
   // the timer (if started) and finish up.  Otherwise, just return.
   if (s->mNumProcessesRunning == 0) {
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/build/XPCOMModule.inc xpcom-patched/build/XPCOMModule.inc
--- xpcom/build/XPCOMModule.inc	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/build/XPCOMModule.inc	2016-10-15 21:12:19.000000000 +0200
@@ -1,29 +1,9 @@
     COMPONENT(MEMORY, nsMemoryImpl::Create)
-    COMPONENT(DEBUG,  nsDebugImpl::Create)
-    COMPONENT(ERRORSERVICE, nsErrorService::Create)
 
     COMPONENT(CATEGORYMANAGER, nsCategoryManager::Create)
-
-    COMPONENT(SCRIPTABLEINPUTSTREAM, nsScriptableInputStream::Create)
-    COMPONENT(BINARYINPUTSTREAM, nsBinaryInputStreamConstructor)
-    COMPONENT(BINARYOUTPUTSTREAM, nsBinaryOutputStreamConstructor)
-    COMPONENT(STORAGESTREAM, nsStorageStreamConstructor)
-    COMPONENT(VERSIONCOMPARATOR, nsVersionComparatorImplConstructor)
-    COMPONENT(SCRIPTABLEBASE64ENCODER, nsScriptableBase64EncoderConstructor)
-    COMPONENT(PIPE, nsPipeConstructor)
-
-    COMPONENT(PROPERTIES, nsPropertiesConstructor)
-
-    COMPONENT(PERSISTENTPROPERTIES, nsPersistentProperties::Create)
-
-    COMPONENT(SUPPORTSARRAY, nsSupportsArray::Create)
-    COMPONENT(ARRAY, nsArrayBase::XPCOMConstructor)
-    COMPONENT(CONSOLESERVICE, nsConsoleServiceConstructor)
     COMPONENT(ATOMSERVICE, nsAtomServiceConstructor)
     COMPONENT(OBSERVERSERVICE, nsObserverService::Create)
 
-    COMPONENT(TIMER, nsTimerImplConstructor)
-
 #define COMPONENT_SUPPORTS(TYPE, Type)                                         \
   COMPONENT(SUPPORTS_##TYPE, nsSupports##Type##Constructor)
 
@@ -46,36 +26,13 @@
     COMPONENT_SUPPORTS(INTERFACE_POINTER, InterfacePointer)
 
 #undef COMPONENT_SUPPORTS
-    COMPONENT(LOCAL_FILE, nsLocalFile::nsLocalFileConstructor)
-    COMPONENT(DIRECTORY_SERVICE, nsDirectoryService::Create)
-    COMPONENT(PROCESS, nsProcessConstructor)
-    COMPONENT(ENVIRONMENT, nsEnvironment::Create)
-
-    COMPONENT(THREADMANAGER, nsThreadManagerGetSingleton)
-    COMPONENT(THREADPOOL, nsThreadPoolConstructor)
-
-    COMPONENT(STRINGINPUTSTREAM, nsStringInputStreamConstructor)
-    COMPONENT(MULTIPLEXINPUTSTREAM, nsMultiplexInputStreamConstructor)
-
-    COMPONENT(VARIANT, nsVariantCCConstructor)
-    COMPONENT(INTERFACEINFOMANAGER_SERVICE, nsXPTIInterfaceInfoManagerGetSingleton)
-
-    COMPONENT(HASH_PROPERTY_BAG, nsHashPropertyBagCCConstructor)
-
-    COMPONENT(UUID_GENERATOR, nsUUIDGeneratorConstructor)
 
 #if defined(XP_WIN)
-    COMPONENT(WINDOWSREGKEY, nsWindowsRegKeyConstructor)
+
 #endif
 
 #if defined(MOZ_WIDGET_COCOA)
-    COMPONENT(MACUTILSIMPL, nsMacUtilsImplConstructor)
+
 #endif
 
-    COMPONENT(SYSTEMINFO, nsSystemInfoConstructor)
     COMPONENT(MEMORY_REPORTER_MANAGER, nsMemoryReporterManagerConstructor)
-    COMPONENT(MEMORY_INFO_DUMPER, nsMemoryInfoDumperConstructor)
-    COMPONENT(IOUTIL, nsIOUtilConstructor)
-    COMPONENT(CYCLE_COLLECTOR_LOGGER, nsCycleCollectorLoggerConstructor)
-    COMPONENT(MESSAGE_LOOP, nsMessageLoopConstructor)
-    COMPONENT(STATUS_REPORTER_MANAGER, nsStatusReporterManagerConstructor)
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/components/nsCategoryManager.cpp xpcom-patched/components/nsCategoryManager.cpp
--- xpcom/components/nsCategoryManager.cpp	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/components/nsCategoryManager.cpp	2016-10-14 21:40:19.000000000 +0200
@@ -804,8 +804,6 @@
 
     nsCOMPtr<nsISupports> instance = do_GetService(contractID);
     if (!instance) {
-      LogMessage("While creating services from category '%s', could not create service for entry '%s', contract ID '%s'",
-                 aCategory, entryString.get(), contractID.get());
       continue;
     }
 
@@ -815,9 +813,6 @@
       if (observer) {
         observer->Observe(aOrigin, aObserverTopic,
                           aObserverData ? aObserverData : u"");
-      } else {
-        LogMessage("While creating services from category '%s', service for entry '%s', contract ID '%s' does not implement nsIObserver.",
-                   aCategory, entryString.get(), contractID.get());
       }
     }
   }
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/components/nsComponentManager.cpp xpcom-patched/components/nsComponentManager.cpp
--- xpcom/components/nsComponentManager.cpp	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/components/nsComponentManager.cpp	2016-10-15 19:12:54.000000000 +0200
@@ -256,24 +256,7 @@
 static already_AddRefed<nsIFile>
 GetLocationFromDirectoryService(const char* aProp)
 {
-  nsCOMPtr<nsIProperties> directoryService;
-  nsDirectoryService::Create(nullptr,
-                             NS_GET_IID(nsIProperties),
-                             getter_AddRefs(directoryService));
-
-  if (!directoryService) {
-    return nullptr;
-  }
-
-  nsCOMPtr<nsIFile> file;
-  nsresult rv = directoryService->Get(aProp,
-                                      NS_GET_IID(nsIFile),
-                                      getter_AddRefs(file));
-  if (NS_FAILED(rv)) {
-    return nullptr;
-  }
-
-  return file.forget();
+  return nullptr;
 }
 
 static already_AddRefed<nsIFile>
@@ -337,12 +320,6 @@
   }
 
   sStaticModules = new nsTArray<const mozilla::Module*>;
-  for (const mozilla::Module * const* staticModules =
-         &NSMODULE_NAME(start_kPStaticModules) + 1;
-       staticModules < &NSMODULE_NAME(end_kPStaticModules); ++staticModules)
-    if (*staticModules) { // ASAN adds padding
-      sStaticModules->AppendElement(*staticModules);
-    }
 }
 
 nsTArray<nsComponentManagerImpl::ComponentLocation>*
@@ -373,11 +350,6 @@
 
   InitializeStaticModules();
 
-  nsresult rv = mNativeModuleLoader.Init();
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
   nsCategoryManager::GetSingleton()->SuppressNotifications(true);
 
   RegisterModule(&kXPCOMModule, nullptr);
@@ -386,47 +358,6 @@
     RegisterModule((*sStaticModules)[i], nullptr);
   }
 
-  // The overall order in which chrome.manifests are expected to be treated
-  // is the following:
-  // - greDir
-  // - greDir's omni.ja
-  // - appDir
-  // - appDir's omni.ja
-
-  InitializeModuleLocations();
-  ComponentLocation* cl = sModuleLocations->AppendElement();
-  nsCOMPtr<nsIFile> lf = CloneAndAppend(greDir,
-                                        NS_LITERAL_CSTRING("chrome.manifest"));
-  cl->type = NS_APP_LOCATION;
-  cl->location.Init(lf);
-
-  RefPtr<nsZipArchive> greOmnijar =
-    mozilla::Omnijar::GetReader(mozilla::Omnijar::GRE);
-  if (greOmnijar) {
-    cl = sModuleLocations->AppendElement();
-    cl->type = NS_APP_LOCATION;
-    cl->location.Init(greOmnijar, "chrome.manifest");
-  }
-
-  bool equals = false;
-  appDir->Equals(greDir, &equals);
-  if (!equals) {
-    cl = sModuleLocations->AppendElement();
-    cl->type = NS_APP_LOCATION;
-    lf = CloneAndAppend(appDir, NS_LITERAL_CSTRING("chrome.manifest"));
-    cl->location.Init(lf);
-  }
-
-  RefPtr<nsZipArchive> appOmnijar =
-    mozilla::Omnijar::GetReader(mozilla::Omnijar::APP);
-  if (appOmnijar) {
-    cl = sModuleLocations->AppendElement();
-    cl->type = NS_APP_LOCATION;
-    cl->location.Init(appOmnijar, "chrome.manifest");
-  }
-
-  RereadChromeManifests(false);
-
   nsCategoryManager::GetSingleton()->SuppressNotifications(false);
 
   RegisterWeakMemoryReporter(this);
@@ -443,7 +374,7 @@
   // The preference system is registered as a component so at this point during
   // component manager initialization we know it is setup and we can register
   // for notifications.
-  LogModulePrefWatcher::RegisterPrefWatcher();
+  //LogModulePrefWatcher::RegisterPrefWatcher();
 
   // Unfortunately, we can't register the nsCategoryManager memory reporter
   // in its constructor (which is triggered by the GetSingleton() call
@@ -472,13 +403,7 @@
 
     KnownModule* m;
     if (aFile) {
-      nsCString uri;
-      aFile->GetURIString(uri);
-      NS_ASSERTION(!mKnownModules.Get(uri),
-                   "Must not register a binary module twice.");
 
-      m = new KnownModule(aModule, *aFile);
-      mKnownModules.Put(uri, m);
     } else {
       m = new KnownModule(aModule);
       mKnownStaticModules.AppendElement(m);
@@ -552,10 +477,6 @@
       existing = "<unknown module>";
     }
     SafeMutexAutoUnlock unlock(mLock);
-    LogMessage("While registering XPCOM module %s, trying to re-register CID '%s' already registered by %s.",
-               aModule->Description().get(),
-               idstr,
-               existing.get());
     return;
   }
 
@@ -581,10 +502,6 @@
     aEntry->cid->ToProvidedString(idstr);
 
     SafeMutexAutoUnlock unlock(mLock);
-    LogMessage("Could not map contract ID '%s' to CID %s because no implementation of the CID is registered.",
-               aEntry->contractid,
-               idstr);
-
     return;
   }
 
@@ -608,26 +525,7 @@
                    bool aChromeOnly,
                    bool aXPTOnly)
 {
-  MOZ_ASSERT(!aXPTOnly || !nsComponentManagerImpl::gComponentManager);
-  uint32_t len;
-  FileLocation::Data data;
-  UniquePtr<char[]> buf;
-  nsresult rv = aFile.GetData(data);
-  if (NS_SUCCEEDED(rv)) {
-    rv = data.GetSize(&len);
-  }
-  if (NS_SUCCEEDED(rv)) {
-    buf = MakeUnique<char[]>(len + 1);
-    rv = data.Copy(buf.get(), len);
-  }
-  if (NS_SUCCEEDED(rv)) {
-    buf[len] = '\0';
-    ParseManifest(aType, aFile, buf.get(), aChromeOnly, aXPTOnly);
-  } else if (NS_BOOTSTRAPPED_LOCATION != aType) {
-    nsCString uri;
-    aFile.GetURIString(uri);
-    LogMessage("Could not read chrome manifest '%s'.", uri.get());
-  }
+
 }
 
 void
@@ -642,9 +540,7 @@
 nsComponentManagerImpl::ManifestManifest(ManifestProcessingContext& aCx,
                                          int aLineNo, char* const* aArgv)
 {
-  char* file = aArgv[0];
-  FileLocation f(aCx.mFile, file);
-  RegisterManifest(aCx.mType, f, aCx.mChromeOnly);
+
 }
 
 void
@@ -652,31 +548,7 @@
                                                 int aLineNo,
                                                 char* const* aArgv)
 {
-  if (aCx.mFile.IsZip()) {
-    NS_WARNING("Cannot load binary components from a jar.");
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Cannot load binary components from a jar.");
-    return;
-  }
-
-  FileLocation f(aCx.mFile, aArgv[0]);
-  nsCString uri;
-  f.GetURIString(uri);
-
-  if (mKnownModules.Get(uri)) {
-    NS_WARNING("Attempting to register a binary component twice.");
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Attempting to register a binary component twice.");
-    return;
-  }
-
-  const mozilla::Module* m = mNativeModuleLoader.LoadModule(f);
-  // The native module loader should report an error here, we don't have to
-  if (!m) {
-    return;
-  }
 
-  RegisterModule(m, &f);
 }
 
 static void
@@ -715,73 +587,14 @@
 nsComponentManagerImpl::ManifestXPT(ManifestProcessingContext& aCx,
                                     int aLineNo, char* const* aArgv)
 {
-  FileLocation f(aCx.mFile, aArgv[0]);
-  DoRegisterXPT(f);
+
 }
 
 void
 nsComponentManagerImpl::ManifestComponent(ManifestProcessingContext& aCx,
                                           int aLineNo, char* const* aArgv)
 {
-  mLock.AssertNotCurrentThreadOwns();
-
-  char* id = aArgv[0];
-  char* file = aArgv[1];
-
-  nsID cid;
-  if (!cid.Parse(id)) {
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Malformed CID: '%s'.", id);
-    return;
-  }
-
-  // Precompute the hash/file data outside of the lock
-  FileLocation fl(aCx.mFile, file);
-  nsCString hash;
-  fl.GetURIString(hash);
-
-  MutexLock lock(mLock);
-  nsFactoryEntry* f = mFactories.Get(cid);
-  if (f) {
-    char idstr[NSID_LENGTH];
-    cid.ToProvidedString(idstr);
-
-    nsCString existing;
-    if (f->mModule) {
-      existing = f->mModule->Description();
-    } else {
-      existing = "<unknown module>";
-    }
-
-    lock.Unlock();
-
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Trying to re-register CID '%s' already registered by %s.",
-                          idstr,
-                          existing.get());
-    return;
-  }
-
-  KnownModule* km;
 
-  km = mKnownModules.Get(hash);
-  if (!km) {
-    km = new KnownModule(fl);
-    mKnownModules.Put(hash, km);
-  }
-
-  void* place;
-
-  PL_ARENA_ALLOCATE(place, &mArena, sizeof(nsCID));
-  nsID* permanentCID = static_cast<nsID*>(place);
-  *permanentCID = cid;
-
-  PL_ARENA_ALLOCATE(place, &mArena, sizeof(mozilla::Module::CIDEntry));
-  mozilla::Module::CIDEntry* e = new (place) mozilla::Module::CIDEntry();
-  e->cid = permanentCID;
-
-  f = new nsFactoryEntry(e, km);
-  mFactories.Put(cid, f);
 }
 
 void
@@ -795,8 +608,6 @@
 
   nsID cid;
   if (!cid.Parse(id)) {
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Malformed CID: '%s'.", id);
     return;
   }
 
@@ -804,9 +615,6 @@
   nsFactoryEntry* f = mFactories.Get(cid);
   if (!f) {
     lock.Unlock();
-    LogMessageWithContext(aCx.mFile, aLineNo,
-                          "Could not map contract ID '%s' to CID %s because no implementation of the CID is registered.",
-                          contract, id);
     return;
   }
 
@@ -828,21 +636,14 @@
 void
 nsComponentManagerImpl::RereadChromeManifests(bool aChromeOnly)
 {
-  for (uint32_t i = 0; i < sModuleLocations->Length(); ++i) {
-    ComponentLocation& l = sModuleLocations->ElementAt(i);
-    RegisterManifest(l.type, l.location, aChromeOnly);
-  }
+
 }
 
 bool
 nsComponentManagerImpl::KnownModule::EnsureLoader()
 {
   if (!mLoader) {
-    nsCString extension;
-    mFile.GetURIString(extension);
-    CutExtension(extension);
-    mLoader =
-      nsComponentManagerImpl::gComponentManager->LoaderForExtension(extension);
+
   }
   return !!mLoader;
 }
@@ -858,8 +659,6 @@
       return false;
     }
 
-    mModule = mLoader->LoadModule(mFile);
-
     if (!mModule) {
       mFailed = true;
       return false;
@@ -882,11 +681,7 @@
 nsComponentManagerImpl::KnownModule::Description() const
 {
   nsCString s;
-  if (mFile) {
-    mFile.GetURIString(s);
-  } else {
-    s = "<static module>";
-  }
+  s = "<static module>";
   return s;
 }
 
@@ -916,9 +711,6 @@
   sXPTIInfosBook = nullptr;
 #endif
 
-  // Unload libraries
-  mNativeModuleLoader.UnloadLibraries();
-
   // delete arena for strings and small objects
   PL_FinishArenaPool(&mArena);
 
@@ -2018,57 +1810,13 @@
     return NS_ERROR_FAILURE;
   }
 
-  nsCOMPtr<nsIFile> manifest;
-  nsString path;
-  nsresult rv = aLocation->GetPath(path);
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  nsComponentManagerImpl::ComponentLocation elem;
-  elem.type = NS_BOOTSTRAPPED_LOCATION;
-
-  if (Substring(path, path.Length() - 4).EqualsLiteral(".xpi")) {
-    elem.location.Init(aLocation, "chrome.manifest");
-  } else {
-    nsCOMPtr<nsIFile> lf =
-      CloneAndAppend(aLocation, NS_LITERAL_CSTRING("chrome.manifest"));
-    elem.location.Init(lf);
-  }
-
-  // Remove reference.
-  nsComponentManagerImpl::sModuleLocations->RemoveElement(elem,
-                                                          ComponentLocationComparator());
-
-  rv = cr->CheckForNewChrome();
+  nsresult rv = cr->CheckForNewChrome();
   return rv;
 }
 
 NS_IMETHODIMP
 nsComponentManagerImpl::GetManifestLocations(nsIArray** aLocations)
 {
-  NS_ENSURE_ARG_POINTER(aLocations);
-  *aLocations = nullptr;
-
-  if (!sModuleLocations) {
-    return NS_ERROR_NOT_INITIALIZED;
-  }
-
-  nsCOMPtr<nsIMutableArray> locations = nsArray::Create();
-  nsresult rv;
-  for (uint32_t i = 0; i < sModuleLocations->Length(); ++i) {
-    ComponentLocation& l = sModuleLocations->ElementAt(i);
-    FileLocation loc = l.location;
-    nsCString uriString;
-    loc.GetURIString(uriString);
-    nsCOMPtr<nsIURI> uri;
-    rv = NS_NewURI(getter_AddRefs(uri), uriString);
-    if (NS_SUCCEEDED(rv)) {
-      locations->AppendElement(uri, false);
-    }
-  }
-
-  locations.forget(aLocations);
   return NS_OK;
 }
 
@@ -2121,41 +1869,12 @@
 EXPORT_XPCOM_API(nsresult)
 XRE_AddManifestLocation(NSLocationType aType, nsIFile* aLocation)
 {
-  nsComponentManagerImpl::InitializeModuleLocations();
-  nsComponentManagerImpl::ComponentLocation* c =
-    nsComponentManagerImpl::sModuleLocations->AppendElement();
-  c->type = aType;
-  c->location.Init(aLocation);
-
-  if (nsComponentManagerImpl::gComponentManager &&
-      nsComponentManagerImpl::NORMAL ==
-        nsComponentManagerImpl::gComponentManager->mStatus) {
-    nsComponentManagerImpl::gComponentManager->RegisterManifest(aType,
-                                                                c->location,
-                                                                false);
-  }
-
   return NS_OK;
 }
 
 EXPORT_XPCOM_API(nsresult)
 XRE_AddJarManifestLocation(NSLocationType aType, nsIFile* aLocation)
 {
-  nsComponentManagerImpl::InitializeModuleLocations();
-  nsComponentManagerImpl::ComponentLocation* c =
-    nsComponentManagerImpl::sModuleLocations->AppendElement();
-
-  c->type = aType;
-  c->location.Init(aLocation, "chrome.manifest");
-
-  if (nsComponentManagerImpl::gComponentManager &&
-      nsComponentManagerImpl::NORMAL ==
-        nsComponentManagerImpl::gComponentManager->mStatus) {
-    nsComponentManagerImpl::gComponentManager->RegisterManifest(aType,
-                                                                c->location,
-                                                                false);
-  }
-
   return NS_OK;
 }
 
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/components/nsComponentManager.h xpcom-patched/components/nsComponentManager.h
--- xpcom/components/nsComponentManager.h	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/components/nsComponentManager.h	2016-10-15 19:12:05.000000000 +0200
@@ -183,7 +183,6 @@
   struct ComponentLocation
   {
     NSLocationType type;
-    mozilla::FileLocation location;
   };
 
   class ComponentLocationComparator
@@ -191,7 +190,7 @@
   public:
     bool Equals(const ComponentLocation& aA, const ComponentLocation& aB) const
     {
-      return (aA.type == aB.type && aA.location.Equals(aB.location));
+      return (aA.type == aB.type);
     }
   };
 
@@ -208,7 +207,6 @@
      */
     KnownModule(const mozilla::Module* aModule, mozilla::FileLocation& aFile)
       : mModule(aModule)
-      , mFile(aFile)
       , mLoaded(false)
       , mFailed(false)
     {
@@ -223,7 +221,6 @@
 
     explicit KnownModule(mozilla::FileLocation& aFile)
       : mModule(nullptr)
-      , mFile(aFile)
       , mLoader(nullptr)
       , mLoaded(false)
       , mFailed(false)
@@ -250,7 +247,6 @@
 
   private:
     const mozilla::Module* mModule;
-    mozilla::FileLocation mFile;
     nsCOMPtr<mozilla::ModuleLoader> mLoader;
     bool mLoaded;
     bool mFailed;
@@ -281,7 +277,6 @@
     ManifestProcessingContext(NSLocationType aType,
                               mozilla::FileLocation& aFile, bool aChromeOnly)
       : mType(aType)
-      , mFile(aFile)
       , mChromeOnly(aChromeOnly)
     {
     }
@@ -289,7 +284,6 @@
     ~ManifestProcessingContext() {}
 
     NSLocationType mType;
-    mozilla::FileLocation mFile;
     bool mChromeOnly;
   };
 
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/glue/nsComponentManagerUtils.cpp xpcom-patched/glue/nsComponentManagerUtils.cpp
--- xpcom/glue/nsComponentManagerUtils.cpp	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/glue/nsComponentManagerUtils.cpp	2016-10-15 20:32:24.000000000 +0200
@@ -17,6 +17,8 @@
 
 #include "nsIComponentManager.h"
 
+#include <iostream>
+
 #ifndef MOZILLA_INTERNAL_API
 
 nsresult
@@ -59,6 +61,7 @@
 nsresult
 CallGetService(const char* aContractID, const nsIID& aIID, void** aResult)
 {
+	std::cout << "CallGetService[internal] " << aContractID << "\n";
   nsComponentManagerImpl* compMgr = nsComponentManagerImpl::gComponentManager;
   if (NS_WARN_IF(!compMgr)) {
     return NS_ERROR_NOT_INITIALIZED;
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/glue/nsThreadUtils.cpp xpcom-patched/glue/nsThreadUtils.cpp
--- xpcom/glue/nsThreadUtils.cpp	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/glue/nsThreadUtils.cpp	2016-10-13 21:15:24.000000000 +0200
@@ -131,7 +131,8 @@
   if (mgr) {
     mgr->GetIsMainThread(&result);
   }
-  return bool(result);
+  //return bool(result);
+  return true;
 }
 #endif
 
diff -Naur --exclude '.*' --exclude '*.pyc' xpcom/glue/objs.mozbuild xpcom-patched/glue/objs.mozbuild
--- xpcom/glue/objs.mozbuild	2016-08-01 09:12:55.000000000 +0200
+++ xpcom-patched/glue/objs.mozbuild	2016-10-16 14:50:24.000000000 +0200
@@ -9,7 +9,6 @@
     'FileUtils.cpp',
     'nsArrayEnumerator.cpp',
     'nsArrayUtils.cpp',
-    'nsCategoryCache.cpp',
     'nsClassInfoImpl.cpp',
     'nsCOMArray.cpp',
     'nsComponentManagerUtils.cpp',
